/**
 * CRMUtils module:  Utility methods for Dynamics CRM client-side scripting.
 * @namespace CRMUtils
 */
const CRMUtils = (() => {
  'use strict';

  /**
   * Normalize input to array
   * @param {*} input - Single value or array
   * @returns {Array}
   */
  function toArray(input) {
    return Array.isArray(input) ? input : [input];
  }

  /**
   * Retrieve values of one or more fields
   * @param {Xrm.ExecutionContext<any, any>} context - Execution context
   * @param {string|string[]} fieldNames - Logical name(s) of field(s)
   * @returns {any[]} Array of field values
   */
  function getFieldValue(context, fieldNames) {
    const formCtx = context.getFormContext();
    return toArray(fieldNames).map(name => {
      const attr = formCtx.getAttribute(name);
      if (!attr) console.error(`getFieldValue: Field '${name}' not found.`);
      return attr ? attr.getValue() : null;
    });
  }

  /**
   * Set value(s) for one or more fields
   * @param {Xrm.ExecutionContext<any, any>} context
   * @param {string|string[]} fieldNames
   * @param {*|*[]} values
   */
  function setFieldValue(context, fieldNames, values) {
    if (values === undefined) {
      console.error("setFieldValue: 'values' parameter is required.");
      return;
    }
    const formCtx = context.getFormContext();
    const names = toArray(fieldNames);
    const vals = toArray(values);

    if (vals.length != names.length) {
      console.error(
        `setFieldValue: provided values count (${vals.length}) doesn't equal to fields count (${names.length}).`
      );
    }

    names.forEach((name, idx) => {
      const attr = formCtx.getAttribute(name);
      if (!attr) return console.error(`setFieldValue: Field '${name}' not found.`);
      const value =  vals[idx];
      attr.setValue(value);
      attr.setSubmitMode('always');
    });
  }

  /**
   * Show or hide control(s)
   * @param {Xrm.ExecutionContext<any, any>} context
   * @param {string|string[]} controlNames
   * @param {boolean} isVisible
   */
  function setFieldVisible(context, controlNames, isVisible) {
    if (typeof isVisible !== 'boolean') {
      console.error("setFieldVisible: 'isVisible' must be boolean.");
      return;
    }
    const formCtx = context.getFormContext();
    toArray(controlNames).forEach(name => {
      const ctrl = formCtx.getControl(name);
      if (!ctrl) return console.error(`setFieldVisible: Control '${name}' not found.`);
      ctrl.setVisible(isVisible);
    });
  }

  /**
   * Enable or disable control(s)
   * @param {Xrm.ExecutionContext<any, any>} context
   * @param {string|string[]} controlNames
   * @param {boolean} isDisabled
   */
  function setFieldDisabled(context, controlNames, isDisabled) {
    if (typeof isDisabled !== 'boolean') {
      console.error("setFieldDisabled: 'isDisabled' must be boolean.");
      return;
    }
    const formCtx = context.getFormContext();
    toArray(controlNames).forEach(name => {
      const ctrl = formCtx.getControl(name);
      if (!ctrl) return console.error(`setFieldDisabled: Control '${name}' not found.`);
      ctrl.setDisabled(isDisabled);
    });
  }

  /**
   * Set required level for attribute(s)
   * @param {Xrm.ExecutionContext<any, any>} context
   * @param {string|string[]} fieldNames
   * @param {Xrm.AttributeRequiredLevel} level
   */
  function setFieldRequired(context, fieldNames, level) {
    if (!level) {
      console.error("setFieldRequired: 'level' is required.");
      return;
    }
    const formCtx = context.getFormContext();
    toArray(fieldNames).forEach(name => {
      const attr = formCtx.getAttribute(name);
      if (!attr) return console.error(`setFieldRequired: Field '${name}' not found.`);
      attr.setRequiredLevel(level);
    });
  }

  const VALID_LEVELS = ['INFO', 'WARNING', 'ERROR'];

  /**
   * Show a form notification
   * @param {Xrm.ExecutionContext<any, any>} context
   * @param {string} message
   * @param {string} level - INFO | WARNING | ERROR
   * @param {string} uniqueId
   */
  function showFormNotification(context, message, level, uniqueId) {
    if (!message || !level || !uniqueId) {
      console.error("showFormNotification: 'message', 'level', and 'uniqueId' are required.");
      return;
    }
    const lvl = level.toUpperCase();
    if (!VALID_LEVELS.includes(lvl)) {
      console.error(`showFormNotification: invalid level '${level}'.`);
      return;
    }
    context.getFormContext().ui.setFormNotification(message, lvl, uniqueId);
  }

  /**
   * Clear a form notification
   * @param {Xrm.ExecutionContext<any, any>} context
   * @param {string} uniqueId
   */
  function clearFormNotification(context, uniqueId) {
    if (!uniqueId) {
      console.error("clearFormNotification: 'uniqueId' is required.");
      return;
    }
    context.getFormContext().ui.clearFormNotification(uniqueId);
  }

  /**
   * Get first lookup value
   * @param {Xrm.ExecutionContext<any, any>} context
   * @param {string} fieldName
   * @returns {Xrm.LookupValue|null}
   */
  function getLookupValue(context, fieldName) {
    if (!fieldName) {
      console.error("getLookupValue: 'fieldName' is required.");
      return null;
    }
    const arr = context.getFormContext().getAttribute(fieldName)?.getValue();
    return arr && arr.length ? arr[0] : null;
  }

  /**
   * Set a lookup value
   * @param {Xrm.ExecutionContext<any, any>} context
   * @param {string} fieldName
   * @param {string} id
   * @param {string} name
   * @param {string} entityType
   */
  function setLookupValue(context, fieldName, id, name, entityType) {
    if (!fieldName || !id || !name || !entityType) {
      console.error("setLookupValue: all parameters are required.");
      return;
    }
    const cleanId = id.replace(/[{}]/g, '');
    const lookup = [{ id: cleanId, name, entityType }];
    context.getFormContext().getAttribute(fieldName)?.setValue(lookup);
  }

  /**
   * Generate a unique identifier string
   * @param {string} prefix
   * @returns {string}
   */
  function generateUniqueId(prefix) {
    if (!prefix) {
      console.error("generateUniqueId: 'prefix' is required.");
      return '';
    }
    return `${prefix}_${Date.now()}_${Math.floor(Math.random() * 1000)}`;
  }

  // Expose public API
  return {
    getFieldValue,
    setFieldValue,
    setFieldVisible,
    setFieldDisabled,
    setFieldRequired,
    showFormNotification,
    clearFormNotification,
    getLookupValue,
    setLookupValue,
    generateUniqueId
  };
})();
